const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const cors = require("cors");
const shortid = require("shortid");
const WebSocket = require("ws");
const axios = require("axios");
const Device = require("./models/Device");
const sendVerificationEmail = require("./utils/sendVerificationEmail");
const crypto = require("crypto"); // –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
const sendResetEmail = require("./utils/sendResetEmail");
const bcrypt = require("bcrypt");

const app = express();
const port = 3001;

app.use(cors());
app.use(bodyParser.json());
app.use("/uploads", express.static("uploads"));
// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö MongoDB
mongoose.connect("mongodb://localhost:27017/computerClub", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
const db = mongoose.connection;

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db.on("error", console.error.bind(console, "Connection error:"));
db.once("open", () => {
  console.log("Connected to the database");
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ö–µ–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

const userSchema = new mongoose.Schema(
  {
    username: {
      type: String,
      required: true,
      unique: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
    },
    password: {
      type: String,
      required: true,
    },
    role: {
      type: String,
      enum: ["user", "admin"],
      default: "user",
    },
    avatar: {
      type: String,
      default: "./uploads/usericon.png",
    },
    commentsCount: {
      type: Number,
      default: 0,
    },
    lastCommentDate: Date,
    resetPasswordToken: String,
    resetPasswordExpires: Date,

    // ‚úÖ –ù–æ–≤—ñ –ø–æ–ª—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email:
    isVerified: {
      type: Boolean,
      default: false,
    },
    verificationToken: {
      type: String,
    },

    // ‚úÖ –ù–æ–≤—ñ –ø–æ–ª—è –¥–ª—è no-show
    noShowCount: {
      type: Number,
      default: 0, // –ö—ñ–ª—å–∫—ñ—Å—Ç—å no-show
    },
    noShowHistory: {
      type: [
        {
          date: { type: Date, default: Date.now },
          type: { type: String, enum: ["cancelled", "noShow"], required: true }, // –¢–∏–ø –ø–æ–¥—ñ—ó
          bookingId: { type: mongoose.Schema.Types.ObjectId },
        },
      ],
      default: [], // –Ü—Å—Ç–æ—Ä—ñ—è no-show
    },
    cancelCount: { type: Number, default: 0 },
    cancelHistory: [
      {
        date: { type: Date, required: true },
        type: { type: String, required: true },
        bookingId: { type: mongoose.Schema.Types.ObjectId },
      },
    ],
  },
  { timestamps: true }
);

const User = mongoose.model("User", userSchema);

module.exports = User; // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥–µ–ª—å

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ö–µ–º–∏ —Ç—É—Ä–Ω—ñ—Ä—É
const turnirSchema = new mongoose.Schema({
  pairs: [
    {
      team1: String,
      team2: String,
      winner: String, // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—è
    },
  ],
  turnirName: String,
  uniqueCode: String,
  createdAt: { type: Date, default: Date.now, index: { expires: "7d" } }, // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ createdAt –∑ TTL —ñ–Ω–¥–µ–∫—Å–æ–º
});

const Turnir = mongoose.model("Turnir", turnirSchema);

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ö–µ–º–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
/* const BookingSchema = new mongoose.Schema({
  zone: String,
  hours: Number,
  price: Number,
  userId: mongoose.Schema.Types.ObjectId,
  userEmail: String, // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –µ–º–µ–π–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  date: Date,
  time: String,
  createdAt: { type: Date, default: Date.now, index: { expires: "3d" } }, // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ createdAt –∑ TTL —ñ–Ω–¥–µ–∫—Å–æ–º
}); */

//const Booking = mongoose.model("Booking", BookingSchema);

// WebSocket —Å–µ—Ä–≤–µ—Ä
const wss = new WebSocket.Server({ port: 8000 });

wss.on("connection", (ws) => {
  console.log("New client connected");
  ws.on("message", (message) => {
    console.log(`Received message => ${message}`);
  });
  ws.on("close", () => {
    console.log("Client disconnected");
  });
});

const notifyClients = (data) => {
  wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify(data));
    }
  });
};

/*const onNewBooking = (booking) => {
  notifyClients({ type: "NEW_BOOKING", booking });
};*/

app.post("/register", async (req, res) => {
  const { username, email, password, role } = req.body;

  try {
    const existingUser = await User.findOne({ $or: [{ username }, { email }] });
    if (existingUser) {
      return res
        .status(400)
        .json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –∞–±–æ –µ–º–µ–π–ª–æ–º –≤–∂–µ —ñ—Å–Ω—É—î" });
    }

    const avatar =
      req.body.avatar || "http://localhost:3001/uploads/usericon.png";

    const verificationToken = crypto.randomBytes(32).toString("hex");

    // üîê –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = new User({
      username,
      email,
      password: hashedPassword, // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ö–µ—à, –∞ –Ω–µ –æ—Ä–∏–≥—ñ–Ω–∞–ª
      role,
      avatar,
      verificationToken,
      isVerified: false,
    });

    await newUser.save();

    // üîî –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ª–∏—Å—Ç
    await sendVerificationEmail(email, verificationToken);

    res.status(201).json({
      message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
    });
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", err);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" });
  }
});

app.post("/login", async (req, res) => {
  const { login, password } = req.body;

  try {
    const user = await User.findOne({
      $or: [{ username: login }, { email: login }],
    });

    if (!user) {
      return res.status(401).json({ message: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –µ–º–µ–π–ª" });
    }

    const isHashed = user.password.startsWith("$2b$");

    let isPasswordValid = false;

    if (isHashed) {
      // üîê –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
      isPasswordValid = await bcrypt.compare(password, user.password);
    } else {
      // üßì —Å—Ç–∞—Ä–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
      if (user.password === password) {
        // üîÑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ö–µ—à—É—î–º–æ –π –æ–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å
        const hashed = await bcrypt.hash(password, 10);
        user.password = hashed;
        await user.save();
        isPasswordValid = true;
      }
    }

    if (!isPasswordValid) {
      return res.status(401).json({ message: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å" });
    }

    // üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ email –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    if (!user.isVerified) {
      return res.status(403).json({
        message: "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º.",
      });
    }

    res.status(200).json(user);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.get("/verify-email", async (req, res) => {
  const { token } = req.query;

  if (!token) {
    return res.status(400).send("–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç: –Ω–µ–º–∞—î —Ç–æ–∫–µ–Ω—É");
  }

  try {
    const user = await User.findOne({ verificationToken: token });

    if (!user) {
      return res.status(400).send("–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω");
    }

    user.isVerified = true;
    user.verificationToken = undefined;
    await user.save();

    res.send(`
      <h2>‚úÖ –ü–æ—à—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!</h2>
      <p>–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏ –¥–æ —Å–∏—Å—Ç–µ–º–∏.</p>
    `);
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:", err);
    res.status(500).send("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ");
  }
});

app.post("/resend-verification", async (req, res) => {
  const { email } = req.body;

  try {
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    if (user.isVerified) {
      return res.status(400).json({ message: "–ü–æ—à—Ç–∞ –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞" });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω
    const newToken = crypto.randomBytes(32).toString("hex");
    user.verificationToken = newToken;

    await user.save();

    await sendVerificationEmail(user.email, newToken, user.username);
    res.status(200).json({ message: "–õ–∏—Å—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ" });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.post("/request-password-reset", async (req, res) => {
  const { email } = req.body;

  try {
    const user = await User.findOne({ email });

    if (!user) {
      return res
        .status(404)
        .json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º email –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
    }

    const token = crypto.randomBytes(32).toString("hex");
    const expiration = Date.now() + 60 * 60 * 1000; // 1 –≥–æ–¥–∏–Ω–∞

    user.resetPasswordToken = token;
    user.resetPasswordExpires = expiration;
    await user.save();

    await sendResetEmail(email, token);

    res.json({ message: "–õ–∏—Å—Ç –∑ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ." });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–∏—Å—Ç–∞:", error);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–∏—Å—Ç." });
  }
});

app.post("/reset-password", async (req, res) => {
  const { token, newPassword } = req.body;

  try {
    const user = await User.findOne({
      resetPasswordToken: token,
      resetPasswordExpires: { $gt: Date.now() },
    });

    if (!user) {
      return res
        .status(400)
        .json({ message: "–ù–µ–¥—ñ–π—Å–Ω–µ –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è." });
    }

    // üîê –•–µ—à—É—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;

    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;

    await user.save();

    res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!" });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ –ø–∞—Ä–æ–ª—é:", error);
    res.status(500).json({ message: "–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞." });
  }
});

// –û–±—Ä–æ–±–Ω–∏–∫ POST-–∑–∞–ø–∏—Ç—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω—ñ—Ä—É
app.post("/createTurnir", async (req, res) => {
  const { pairs, turnirName } = req.body;
  try {
    const uniqueCode = shortid.generate();
    const newTurnir = new Turnir({ pairs, turnirName, uniqueCode });
    await newTurnir.save();
    res.status(200).json({ uniqueCode });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç—É—Ä–Ω—ñ—Ä—É:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –û–±—Ä–æ–±–Ω–∏–∫ POST-–∑–∞–ø–∏—Ç—É –¥–ª—è –ø–æ—à—É–∫—É —Ç—É—Ä–Ω—ñ—Ä—É –∑–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –∫–æ–¥–æ–º
app.post("/findTurnir", async (req, res) => {
  const { uniqueCode } = req.body;

  try {
    const turnirData = await Turnir.findOne({ uniqueCode });

    if (turnirData) {
      const { pairs, turnirName, uniqueCode } = turnirData;
      res.status(200).json({ turnirData: { pairs, turnirName, uniqueCode } });
      console.log("turnir found");
      console.log(turnirData);
    } else {
      res.status(404).json({ message: "–¢—É—Ä–Ω—ñ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —Ç—É—Ä–Ω—ñ—Ä—É:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –û–±—Ä–æ–±–Ω–∏–∫ POST-–∑–∞–ø–∏—Ç—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É
app.post("/updateTurnir", async (req, res) => {
  const { turnir } = req.body;

  try {
    const updatedTurnir = await Turnir.findOneAndUpdate(
      { uniqueCode: turnir.uniqueCode },
      { pairs: turnir.pairs },
      { new: true }
    );

    if (updatedTurnir) {
      res.status(200).json({ message: "–¢—É—Ä–Ω—ñ—Ä —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ" });
    } else {
      res.status(404).json({ message: "–¢—É—Ä–Ω—ñ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç—É—Ä–Ω—ñ—Ä—É:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

/*app.post("/bookings", async (req, res) => {
  const { zone, hours, price, userId, date, time } = req.body;

  try {
    const user = await User.findById(userId); // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ userId
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }
    const newBooking = new Booking({
      zone,
      hours,
      price,
      userId,
      userEmail: user.email, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–º–µ–π–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      date,
      time,
    });
    await newBooking.save();
    onNewBooking(newBooking); // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
    res
      .status(200)
      .json({ message: "Booking created successfully", booking: newBooking });
  } catch (error) {
    console.error("Error creating booking:", error);
    res.status(500).json({ message: "Server error" });
  }
});

// –û–±—Ä–æ–±–Ω–∏–∫ GET-–∑–∞–ø–∏—Ç—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å
app.get("/bookings", async (req, res) => {
  try {
    const bookings = await Booking.find();
    res.status(200).json(bookings);
  } catch (error) {
    console.error("Error fetching bookings:", error);
    res.status(500).json({ message: "Server error" });
  }
});

// –û–±—Ä–æ–±–Ω–∏–∫ GET-–∑–∞–ø–∏—Ç—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get("/bookings/user/:userId", async (req, res) => {
  const { userId } = req.params;

  try {
    const bookings = await Booking.find({ userId });
    res.status(200).json(bookings);
  } catch (error) {
    console.error("Error fetching bookings:", error);
    res.status(500).json({ message: "Server error" });
  }
});

// –û–±—Ä–æ–±–Ω–∏–∫ DELETE-–∑–∞–ø–∏—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
app.delete("/bookings/:id", async (req, res) => {
  const { id } = req.params;
  console.log("Received delete request for booking ID:", id); // Log the received ID

  try {
    const deletedBooking = await Booking.findByIdAndDelete(id);

    if (!deletedBooking) {
      return res.status(404).json({ message: "Booking not found" });
    }

    notifyClients({ type: "DELETE_BOOKING", booking: deletedBooking });
    res.status(200).json({
      message: "Booking deleted successfully",
      booking: deletedBooking,
    });
  } catch (error) {
    console.error("Error deleting booking:", error);
    res.status(500).json({ message: "Server error" });
  }
}); */

// –û–±—Ä–æ–±–Ω–∏–∫ POST-–∑–∞–ø–∏—Ç—É –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è

app.post("/change-password", async (req, res) => {
  const { userId, currentPassword, newPassword } = req.body;

  try {
    const user = await User.findById(userId);
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    // üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) {
      return res
        .status(400)
        .json({ success: false, message: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å" });
    }

    // üîê –•–µ—à—É—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
    const hashedNewPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedNewPassword;

    await user.save();
    res.status(200).json({ success: true, message: "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ" });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–æ–ª—è:", error);
    res.status(500).json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –û–±—Ä–æ–±–Ω–∏–∫ POST-–∑–∞–ø–∏—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ —ñ–º–µ–Ω—ñ
app.post("/check-username", async (req, res) => {
  const { username } = req.body;

  try {
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(200).json({ exists: true });
    } else {
      return res.status(200).json({ exists: false });
    }
  } catch (err) {
    console.error(err);
    res.status(500).send("Failed to check username");
  }
});

// –û–±—Ä–æ–±–Ω–∏–∫ POST-–∑–∞–ø–∏—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –µ–º–µ–π–ª—É
app.post("/check-email", async (req, res) => {
  const { email } = req.body;

  try {
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(200).json({ exists: true });
    } else {
      return res.status(200).json({ exists: false });
    }
  } catch (err) {
    console.error(err);
    res.status(500).send("Failed to check email");
  }
});

// –°—Ö–µ–º–∞ –¥–ª—è MongoDB
const reviewSchema = new mongoose.Schema(
  {
    text: { type: String, required: true },
    rating: { type: Number, required: true, min: 1, max: 5 },
    useri: {
      username: { type: String, required: true },
      profileImage: { type: String, default: "" },
      userId: { type: String, required: true },
    },
    sentiment: { type: String, required: true }, // –ü–æ–ª–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ—é
    processedText: { type: String, required: true }, // –ü–æ–ª–µ –¥–ª—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
  },
  { timestamps: true }
);

const Review = mongoose.model("Review", reviewSchema);

// –§—É–Ω–∫—Ü—ñ—è –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—Ä–æ—é
const adjustSentiment = (sentiment, rating) => {
  if (sentiment === "Negative" && rating > 3) {
    return "Neutral"; // –Ø–∫—â–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π —ñ –≤–∏—Å–æ–∫–∞ –æ—Ü—ñ–Ω–∫–∞, —Ä–æ–±–∏–º–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–º
  }

  if (sentiment === "Neutral" && rating <= 2) {
    return "Negative"; // –Ø–∫—â–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π —ñ –Ω–∏–∑—å–∫–∞ –æ—Ü—ñ–Ω–∫–∞, —Ä–æ–±–∏–º–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º
  }

  if (sentiment === "Positive" && rating <= 3) {
    return "Neutral"; // –Ø–∫—â–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π —ñ –Ω–∏–∑—å–∫–∞ –æ—Ü—ñ–Ω–∫–∞, —Ä–æ–±–∏–º–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º
  }

  return sentiment; // –î–ª—è —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π
};

// –ï–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
app.get("/api/reviews", async (req, res) => {
  try {
    const reviews = await Review.find().sort({ createdAt: -1 });
    res.json(reviews);
  } catch (error) {
    res.status(500).json({ message: "Error fetching reviews" });
  }
});

app.post("/api/reviews", async (req, res) => {
  const { text, rating, useri, sentiment, processedText } = req.body;

  try {
    const user = await User.findById(useri.userId);

    if (!user) {
      return res.status(400).json({ error: "User not found" });
    }

    const currentDate = new Date();
    const oneWeekAgo = new Date(currentDate);
    oneWeekAgo.setDate(currentDate.getDate() - 7);

    if (user.role !== "admin") {
      if (user.lastCommentDate && user.lastCommentDate > oneWeekAgo) {
        if (user.commentsCount >= 3) {
          return res
            .status(400)
            .json({ error: "–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –ª–∏—à–µ 3 –≤—ñ–¥–≥—É–∫–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å" });
        }
      } else {
        user.commentsCount = 0;
      }
    }

    const adjustedSentiment = adjustSentiment(sentiment, rating);

    const newReview = new Review({
      text,
      rating,
      useri,
      sentiment: adjustedSentiment,
      processedText,
    });

    await newReview.save();

    user.commentsCount += 1;
    user.lastCommentDate = currentDate;
    await user.save();

    return res.status(201).json(newReview);
  } catch (error) {
    console.error(error);
    return res.status(500).json({ error: "Error adding review" });
  }
});

const multer = require("multer");
const path = require("path");

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è multer

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è multer –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "./uploads"); // –ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  },
  filename: (req, file, cb) => {
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(
      null,
      file.fieldname + "-" + uniqueSuffix + path.extname(file.originalname)
    );
  },
});

const upload = multer({ storage: storage });

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.post("/upload-avatar", upload.single("avatar"), async (req, res) => {
  const { userId } = req.body;

  if (!userId) {
    return res.status(400).json({ message: "userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –∑–∞–ø–∏—Ç—ñ" });
  }

  try {
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∞–≤–∞—Ç–∞—Ä–∞
    user.avatar = `http://localhost:3001/uploads/${req.file.filename}`;
    await user.save();
    console.log("userId –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ:", userId);
    console.log("–§–∞–π–ª:", req.file);

    res.status(200).json({
      message: "–ê–≤–∞—Ç–∞—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ",
      avatar: user.avatar,
    });
    console.log("–ù–æ–≤–∏–π –∞–≤–∞—Ç–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", user.avatar);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–≤–∞—Ç–∞—Ä–∞:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// **–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ —ñ —ó—Ö —Å—Ç–∞—Ç—É—Å**
app.get("/devices/status", async (req, res) => {
  try {
    const devices = await Device.find();

    const currentTime = new Date();
    const bufferTime = 30 * 60 * 1000; // 30 —Ö–≤–∏–ª–∏–Ω —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö

    const devicesWithStatus = devices.map((device) => {
      const isBooked = device.bookings.some(
        (booking) =>
          (currentTime >= booking.startTime && currentTime < booking.endTime) ||
          (booking.startTime - currentTime <= bufferTime &&
            booking.startTime > currentTime)
      );

      return { ...device.toObject(), isBooked };
    });

    res.json(devicesWithStatus);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤" });
  }
});

app.post("/devices/book", async (req, res) => {
  try {
    const { deviceId, userId, userEmail, startTime, duration, price } =
      req.body;

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ UTC –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É –∫–ª—ñ—î–Ω—Ç–∞
    const clientStart = new Date(startTime);
    const utcStart = new Date(
      clientStart.getTime() - clientStart.getTimezoneOffset() * 60000
    );
    const utcEnd = new Date(utcStart.getTime() + duration * 3600000);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É (8:00 –∑–∞ –ª–æ–∫–∞–ª—å–Ω–∏–º —á–∞—Å–æ–º –∫–ª—ñ—î–Ω—Ç–∞)
    const clientHours = clientStart.getHours();
    if (clientHours < 8) {
      return res.status(400).json({ error: "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º–æ–∂–ª–∏–≤–µ –∑ 08:00" });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É (24:00 –∑–∞ –ª–æ–∫–∞–ª—å–Ω–∏–º —á–∞—Å–æ–º)
    const clientEnd = new Date(clientStart.getTime() + duration * 3600000);
    if (
      clientEnd.getHours() >= 24 ||
      clientEnd.getDate() !== clientStart.getDate()
    ) {
      return res
        .status(400)
        .json({ error: "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º–∞—î –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è –¥–æ 24:00" });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º–∏–Ω—É–ª–∏–π —á–∞—Å (UTC)
    const nowUTC = new Date();
    if (utcStart < nowUTC) {
      return res
        .status(400)
        .json({ error: "–ù–µ–º–æ–∂–ª–∏–≤–æ –±—Ä–æ–Ω—é–≤–∞—Ç–∏ –Ω–∞ –º–∏–Ω—É–ª–∏–π —á–∞—Å" });
    }

    // –ü–æ—à—É–∫ –ø—Ä–∏—Å—Ç—Ä–æ—é —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    const device = await Device.findOne({ id: deviceId });
    if (!device) {
      return res.status(404).json({ error: "–ü—Ä–∏—Å—Ç—Ä—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const hasConflict = (device.bookings || []).some((b) => {
      const existingStart = new Date(b.startTime);
      const existingEnd = new Date(b.endTime);
      // –Ü–≥–Ω–æ—Ä—É—î–º–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'cancelled'
      if (b.status === "cancelled" || b.status === "noShow") {
        console.log(
          `‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç –∑ 'cancelled' –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è–º: ${existingStart.toISOString()} - ${existingEnd.toISOString()}`
        );
        return false;
      }
      return utcStart < existingEnd && utcEnd > existingStart;
    });

    if (hasConflict) {
      return res.status(400).json({ error: "–ß–∞—Å –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π" });
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ UTC
    device.bookings.push({
      userId,
      userEmail,
      startTime: utcStart,
      endTime: utcEnd,
      price,
      status: "pending", // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å 'pending' –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    });

    await device.save();
    notifyClients({ type: "BOOKING_UPDATED", device });
    res.json({ message: "–£—Å–ø—ñ—à–Ω–æ", booking: device.bookings.at(-1) });
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.get("/bookings/user/:userId", async (req, res) => {
  try {
    const devices = await Device.find({ "bookings.userId": req.params.userId });

    const bookings = devices.flatMap((device) =>
      device.bookings
        .filter((b) => b.userId === req.params.userId)
        .map((b) => ({
          id: b._id, // –î–æ–¥–∞–Ω–æ ID –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω-—Ñ—É–Ω–∫—Ü—ñ–π
          deviceId: device.id,
          type: device.type,
          zone: device.zone,
          startTime: b.startTime,
          endTime: b.endTime,
          price: b.price,
        }))
    );

    res.json(bookings);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å" });
  }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
const updateBookingStatus = async (deviceId, bookingId, status, userId) => {
  try {
    const device = await Device.findOne({ id: deviceId });
    if (!device) throw new Error("–ü—Ä–∏—Å—Ç—Ä—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");

    const booking = device.bookings.id(bookingId);
    if (!booking) throw new Error("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");

    const now = new Date(); // –õ–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å
    const startTime = new Date(booking.startTime); // UTC –∑ –ë–î
    const endTime = new Date(booking.endTime); // UTC –∑ –ë–î

    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ now —É UTC –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    const nowUTC = new Date(now.getTime() - now.getTimezoneOffset() * 60000);
    console.log("üìÖ –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å (UTC):", nowUTC.toISOString());
    console.log("‚è≥ Start Time (UTC):", startTime.toISOString());
    console.log("‚åõ End Time (UTC):", endTime.toISOString());
    console.log("üìã –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å:", booking.status);

    if (status === "cancelled" && nowUTC < startTime) {
      booking.status = "cancelled";
      console.log("‚úÖ –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ 'cancelled'");
    } else if (
      status === "noShow" &&
      nowUTC >= startTime &&
      nowUTC <= endTime
    ) {
      booking.status = "noShow";
      console.log("‚úÖ –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ 'noShow'");
      const user = await User.findOne({ _id: booking.userId });
      if (user) {
        user.noShowCount += 1;
        user.noShowHistory.push({ date: nowUTC, type: "noShow" });
        await user.save();
        console.log("üîÑ noShowCount –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", user._id);
      }
    } else if (status === "completed" && nowUTC > endTime) {
      booking.status = "completed";
      console.log("‚úÖ –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ 'completed'");
    } else {
      throw new Error(
        `–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ '${status}' —É –ø–æ—Ç–æ—á–Ω–æ–º—É —Å—Ç–∞–Ω—ñ: nowUTC=${nowUTC.toISOString()}, startTime=${startTime.toISOString()}, endTime=${endTime.toISOString()}`
      );
    }

    await device.save();
    console.log(
      `–°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ${bookingId} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${status} –æ ${nowUTC}`
    );
    return { success: true, message: `–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${status}` };
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:", error);
    throw error;
  }
};

// –†–æ—É—Ç –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
app.post("/api/cancel-booking", async (req, res) => {
  try {
    const { deviceId, bookingId, userId, startTime } = req.body;
    const now = new Date();
    const bookingStartTime = new Date(startTime); // –û—Ç—Ä–∏–º—É—î–º–æ startTime –∑ —Ñ—Ä–æ–Ω—Ç—É (UTC)
    const userRole = req.headers.role || "user"; // –†–æ–ª—å —ñ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    console.log("üì¶ –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:", {
      deviceId,
      bookingId,
      userId,
      startTime,
      userRole,
    });
    if (!deviceId || !bookingId || !userId || !startTime) {
      throw new Error("–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –≤ –∑–∞–ø–∏—Ç—ñ");
    }
    const device = await Device.findOne({ id: deviceId });
    console.log("–ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π:", device ? "–¢–∞–∫" : "–ù—ñ");
    if (!device) throw new Error("–ü—Ä–∏—Å—Ç—Ä—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    const booking = device.bookings.id(bookingId);
    console.log("–ó–Ω–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", booking ? "–¢–∞–∫" : "–ù—ñ");
    if (!booking) throw new Error("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    const nowUTC = new Date(now.getTime() - now.getTimezoneOffset() * 60000);
    const startUTC = new Date(booking.startTime);
    const endUTC = new Date(booking.endTime);
    console.log("–ß–∞—Å–∏:", { nowUTC, startUTC, endUTC });
    let status;
    if (nowUTC < startUTC) {
      status = "cancelled";
    } else if (nowUTC >= startUTC && nowUTC <= endUTC) {
      status = "noShow";
    } else {
      throw new Error("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–±–æ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–ª–æ—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ");
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–≤—Ç–æ—Ä–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è)
    const originalUserId = booking.userId;
    console.log("–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:", originalUserId);
    const user = await User.findOne({ _id: originalUserId });
    if (!user) {
      console.warn("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:", originalUserId);
    } else {
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è–º bookingId –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
      user.noShowHistory = user.noShowHistory.map((entry) => ({
        ...entry,
        bookingId: entry.bookingId || booking._id, // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ bookingId
      }));
      user.cancelHistory = user.cancelHistory.map((entry) => ({
        ...entry,
        bookingId: entry.bookingId || booking._id, // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ bookingId
      }));

      if (status === "noShow") {
        user.noShowCount += 1;
        user.noShowHistory.push({
          date: nowUTC,
          type: "noShow",
          bookingId: booking._id,
        });
        console.log("üîÑ noShowCount –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", originalUserId);
      } else if (status === "cancelled") {
        user.cancelCount += 1;
        user.cancelHistory.push({
          date: nowUTC,
          type: "cancelled",
          bookingId: booking._id,
        });
        console.log("üîÑ cancelCount –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", originalUserId);
      }
      await user.save();
      console.log("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π:", user._id);
    }

    // –Ø–∫—â–æ –∞–¥–º—ñ–Ω —Å–∫–∞—Å–æ–≤—É—î, –∑–∞—Ä–∞—Ö–æ–≤—É—î–º–æ noShow –∞–≤—Ç–æ—Ä—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    if (userRole === "admin" && status === "noShow") {
      console.log("–ê–¥–º—ñ–Ω —Å–∫–∞—Å—É–≤–∞–≤ noShow –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", originalUserId);
    }

    booking.status = status;
    await device.save();
    console.log(
      `–°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ${bookingId} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${status} –æ ${nowUTC}`
    );

    res.json({ success: true, message: `–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${status}` });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ /api/cancel-booking:", error);
    res.status(500).json({ error: error.message });
  }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –Ω–∞ completed
const checkCompletedBookings = async () => {
  try {
    const now = new Date();
    const nowUTC = new Date(now.getTime() - now.getTimezoneOffset() * 60000);
    const devices = await Device.find();
    for (const device of devices) {
      for (const booking of device.bookings) {
        if (
          booking.status === "pending" &&
          nowUTC > new Date(booking.endTime)
        ) {
          await updateBookingStatus(
            device.id,
            booking._id,
            "completed",
            booking.userId
          );
        }
      }
    }
    console.log(`–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å –æ ${nowUTC}`);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å:", error);
  }
};

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
setInterval(checkCompletedBookings, 1 * 60 * 1000);

// –¢–µ—Å—Ç–æ–≤–∏–π —Ä–æ—É—Ç
app.get("/api/check-status", async (req, res) => {
  await checkCompletedBookings();
  res.json({ message: "–°—Ç–∞—Ç—É—Å–∏ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ" });
});

app.delete("/admin/bookings/:bookingId", async (req, res) => {
  try {
    const userId = req.headers.userid; // –ü–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ userId —É headers
    if (!userId) {
      return res.status(403).json({ error: "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç" });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(403).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π" });
    }

    const device = await Device.findOne({
      "bookings._id": req.params.bookingId,
    });
    if (!device) {
      return res.status(404).json({ error: "–ü—Ä–∏—Å—Ç—Ä—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const booking = device.bookings.find(
      (b) => b._id.toString() === req.params.bookingId
    );

    if (!booking) {
      return res.status(404).json({ error: "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    // –î–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤–ª–∞—Å–Ω–∏–∫–æ–º –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (booking.userId.toString() !== userId && user.role !== "admin") {
      return res
        .status(403)
        .json({ error: "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è" });
    }

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    device.bookings = device.bookings.filter(
      (b) => b._id.toString() !== req.params.bookingId
    );
    await device.save();

    notifyClients({ type: "BOOKING_DELETED", device });
    res.json({ message: "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ" });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
// –î–æ–¥–∞—Ç–∏ –≥–æ–¥–∏–Ω—É –¥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
app.patch("/admin/bookings/:bookingId", async (req, res) => {
  try {
    const { userId } = req.body;
    const user = await User.findById(userId);

    if (!user || user.role !== "admin") {
      return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ" });
    }

    // –ó–Ω–∞–π—Ç–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π —Ç–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    const device = await Device.findOne({
      "bookings._id": req.params.bookingId,
    });
    if (!device) {
      return res.status(404).json({ error: "–ü—Ä–∏—Å—Ç—Ä—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const booking = device.bookings.id(req.params.bookingId);
    if (!booking) {
      return res.status(404).json({ error: "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    // –ó–±—ñ–ª—å—à–∏—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
    booking.endTime = new Date(booking.endTime.getTime() + 3600000);
    await device.save();

    notifyClients({ type: "BOOKING_UPDATED", device });
    res.json({ message: "–ì–æ–¥–∏–Ω—É –¥–æ–¥–∞–Ω–æ", booking });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –î–æ–¥–∞–º–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–æ–ª—ñ
app.get("/bookings", async (req, res) => {
  try {
    const { userId, role } = req.query;

    if (role === "admin") {
      const devices = await Device.find();
      const allBookings = devices.flatMap((device) =>
        device.bookings.map((b) => ({
          ...b.toObject(),
          deviceId: device.id,
          zone: device.zone,
        }))
      );
      return res.json(allBookings);
    }

    const userDevices = await Device.find({ "bookings.userId": userId });
    const userBookings = userDevices.flatMap((device) =>
      device.bookings
        .filter((b) => b.userId === userId)
        .map((b) => ({
          ...b.toObject(),
          deviceId: device.id,
          zone: device.zone,
        }))
    );

    res.json(userBookings);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å" });
  }
});

app.get("/analytics/summary", async (req, res) => {
  try {
    const getLocalDateString = (date) => {
      const offsetMs = date.getTimezoneOffset() * 60000;
      const local = new Date(date.getTime() - offsetMs);
      return local.toISOString().slice(0, 10);
    };

    const nowUTC = new Date();
    const offsetMs = nowUTC.getTimezoneOffset() * 60000;
    const now = new Date(nowUTC.getTime() - offsetMs);

    console.log("–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å (now):", now);

    const from = req.query.from
      ? new Date(req.query.from + "T00:00:00.000Z")
      : new Date(getLocalDateString(now) + "T00:00:00.000Z");

    const to = req.query.to
      ? new Date(req.query.to + "T23:59:59.999Z")
      : new Date(getLocalDateString(now) + "T23:59:59.999Z");

    console.log("Computed 'from' date:", from);
    console.log("Computed 'to' date:", to);

    const devices = await Device.find();

    let totalRevenue = 0;
    let totalBookingsCount = 0;
    let activeBookingsCount = 0;

    const zoneStats = {
      Pro: { revenue: 0, durationHours: 0 },
      VIP: { revenue: 0, durationHours: 0 },
      PS: { revenue: 0, durationHours: 0 },
    };

    const hourUsage = new Array(24).fill(0);
    const dailyRevenueMap = new Map();
    const dailyBookingsMap = new Map();

    devices.forEach((device) => {
      const zone = device.zone;
      if (!zoneStats[zone]) return;

      device.bookings.forEach((booking) => {
        const startUTC = new Date(booking.startTime);
        const endUTC = new Date(booking.endTime);
        const price = booking.price || 0;
        const status = booking.status || "pending"; // –§allback –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤

        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ completed –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è –¥–æ—Ö–æ–¥—ñ–≤ —Ç–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—ñ–≤
        if (
          (from && endUTC < from) ||
          (to && startUTC > to) ||
          status === "cancelled" ||
          status === "noShow"
        ) {
          return;
        }

        // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è completed –±—Ä–æ–Ω—é–≤–∞–Ω—å
        if (status === "completed") {
          totalBookingsCount++;

          const durationHours = (endUTC - startUTC) / (1000 * 60 * 60);

          totalRevenue += price;
          zoneStats[zone].revenue += price;
          zoneStats[zone].durationHours += durationHours;

          const hour = startUTC.getUTCHours();
          hourUsage[hour]++;

          const dayKey = startUTC.toISOString().split("T")[0];
          dailyRevenueMap.set(
            dayKey,
            (dailyRevenueMap.get(dayKey) || 0) + price
          );
          dailyBookingsMap.set(dayKey, (dailyBookingsMap.get(dayKey) || 0) + 1);
        }

        // –ê–∫—Ç–∏–≤–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ª–∏—à–µ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'
        if (status === "pending" && startUTC <= now && endUTC >= now) {
          activeBookingsCount++;
        }
      });
    });

    const dailyRevenue = Array.from(dailyRevenueMap.entries()).map(
      ([date, revenue]) => ({ date, revenue })
    );
    const dailyBookings = Array.from(dailyBookingsMap.entries()).map(
      ([date, count]) => ({ date, count })
    );

    res.json({
      totalRevenue,
      zoneStats,
      hourUsage,
      activeBookingsCount,
      totalBookingsCount,
      dailyRevenue,
      dailyBookings,
    });
  } catch (error) {
    console.error("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø–æ–º–∏–ª–∫–∞:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏" });
  }
});

// –î–æ–¥–∞–π—Ç–µ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
app.use((req, res) => {
  res.status(404).send("Not Found");
});

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}/`);
});

// ... (–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —ñ–º–ø–æ—Ä—Ç, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è)
